#nullable enable
Microsoft.AspNetCore.Http.CookieOptions
Microsoft.AspNetCore.Http.CookieOptions.CookieOptions() -> void
Microsoft.AspNetCore.Http.CookieOptions.Domain.get -> string?
Microsoft.AspNetCore.Http.CookieOptions.Domain.set -> void
Microsoft.AspNetCore.Http.CookieOptions.Expires.get -> System.DateTimeOffset?
Microsoft.AspNetCore.Http.CookieOptions.Expires.set -> void
Microsoft.AspNetCore.Http.CookieOptions.HttpOnly.get -> bool
Microsoft.AspNetCore.Http.CookieOptions.HttpOnly.set -> void
Microsoft.AspNetCore.Http.CookieOptions.IsEssential.get -> bool
Microsoft.AspNetCore.Http.CookieOptions.IsEssential.set -> void
Microsoft.AspNetCore.Http.CookieOptions.MaxAge.get -> System.TimeSpan?
Microsoft.AspNetCore.Http.CookieOptions.MaxAge.set -> void
Microsoft.AspNetCore.Http.CookieOptions.Path.get -> string?
Microsoft.AspNetCore.Http.CookieOptions.Path.set -> void
Microsoft.AspNetCore.Http.CookieOptions.SameSite.get -> Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.CookieOptions.SameSite.set -> void
Microsoft.AspNetCore.Http.CookieOptions.Secure.get -> bool
Microsoft.AspNetCore.Http.CookieOptions.Secure.set -> void
Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature
Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.User.get -> System.Security.Claims.ClaimsPrincipal?
Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.User.set -> void
Microsoft.AspNetCore.Http.Features.FeatureCollection
Microsoft.AspNetCore.Http.Features.FeatureCollection.FeatureCollection() -> void
Microsoft.AspNetCore.Http.Features.FeatureCollection.FeatureCollection(Microsoft.AspNetCore.Http.Features.IFeatureCollection! defaults) -> void
Microsoft.AspNetCore.Http.Features.FeatureCollection.Get<TFeature>() -> TFeature?
Microsoft.AspNetCore.Http.Features.FeatureCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Type!, object!>>!
Microsoft.AspNetCore.Http.Features.FeatureCollection.IsReadOnly.get -> bool
Microsoft.AspNetCore.Http.Features.FeatureCollection.Set<TFeature>(TFeature? instance) -> void
Microsoft.AspNetCore.Http.Features.FeatureCollection.this[System.Type! key].get -> object?
Microsoft.AspNetCore.Http.Features.FeatureCollection.this[System.Type! key].set -> void
Microsoft.AspNetCore.Http.Features.FeatureReference<T>
Microsoft.AspNetCore.Http.Features.FeatureReference<T>.Fetch(Microsoft.AspNetCore.Http.Features.IFeatureCollection! features) -> T?
Microsoft.AspNetCore.Http.Features.FeatureReference<T>.Update(Microsoft.AspNetCore.Http.Features.IFeatureCollection! features, T feature) -> T
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Cache -> TCache?
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Collection.get -> Microsoft.AspNetCore.Http.Features.IFeatureCollection!
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.FeatureReferences(Microsoft.AspNetCore.Http.Features.IFeatureCollection! collection) -> void
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Fetch<TFeature, TState>(ref TFeature? cached, TState state, System.Func<TState, TFeature?>! factory) -> TFeature?
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Fetch<TFeature>(ref TFeature? cached, System.Func<Microsoft.AspNetCore.Http.Features.IFeatureCollection!, TFeature?>! factory) -> TFeature?
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection! collection) -> void
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection! collection, int revision) -> void
Microsoft.AspNetCore.Http.Features.FeatureReferences<TCache>.Revision.get -> int
Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
Microsoft.AspNetCore.Http.Features.HttpsCompressionMode.Compress = 2 -> Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
Microsoft.AspNetCore.Http.Features.HttpsCompressionMode.Default = 0 -> Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
Microsoft.AspNetCore.Http.Features.HttpsCompressionMode.DoNotCompress = 1 -> Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
Microsoft.AspNetCore.Http.Features.IFeatureCollection
Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get<TFeature>() -> TFeature?
Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly.get -> bool
Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision.get -> int
Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set<TFeature>(TFeature? instance) -> void
Microsoft.AspNetCore.Http.Features.IFeatureCollection.this[System.Type! key].get -> object?
Microsoft.AspNetCore.Http.Features.IFeatureCollection.this[System.Type! key].set -> void
Microsoft.AspNetCore.Http.Features.IFormFeature
Microsoft.AspNetCore.Http.Features.IFormFeature.Form.get -> Microsoft.AspNetCore.Http.IFormCollection?
Microsoft.AspNetCore.Http.Features.IFormFeature.Form.set -> void
Microsoft.AspNetCore.Http.Features.IFormFeature.HasFormContentType.get -> bool
Microsoft.AspNetCore.Http.Features.IFormFeature.ReadForm() -> Microsoft.AspNetCore.Http.IFormCollection!
Microsoft.AspNetCore.Http.Features.IFormFeature.ReadFormAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection!>!
Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature
Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.AllowSynchronousIO.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.AllowSynchronousIO.set -> void
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId.set -> void
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress.get -> System.Net.IPAddress?
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress.set -> void
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort.get -> int
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort.set -> void
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress.get -> System.Net.IPAddress?
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress.set -> void
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort.get -> int
Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort.set -> void
Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature
Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.IsReadOnly.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.MaxRequestBodySize.get -> long?
Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.MaxRequestBodySize.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature
Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.CanHaveBody.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body.get -> System.IO.Stream!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers.get -> Microsoft.AspNetCore.Http.IHeaderDictionary!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature
Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.TraceIdentifier.get -> string!
Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.TraceIdentifier.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature
Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.Abort() -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.RequestAborted.get -> System.Threading.CancellationToken
Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.RequestAborted.set -> void
Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature
Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature.Available.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature.Trailers.get -> Microsoft.AspNetCore.Http.IHeaderDictionary!
Microsoft.AspNetCore.Http.Features.IHttpResetFeature
Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(int errorCode) -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.CompleteAsync() -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.DisableBuffering() -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.SendFileAsync(string! path, long offset, long? count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.StartAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Stream.get -> System.IO.Stream!
Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Writer.get -> System.IO.Pipelines.PipeWriter!
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body.get -> System.IO.Stream!
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body.set -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.HasStarted.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers.get -> Microsoft.AspNetCore.Http.IHeaderDictionary!
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers.set -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnCompleted(System.Func<object!, System.Threading.Tasks.Task!>! callback, object! state) -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnStarting(System.Func<object!, System.Threading.Tasks.Task!>! callback, object! state) -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase.get -> string?
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase.set -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode.get -> int
Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode.set -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature
Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.Trailers.set -> void
Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.Trailers.get -> Microsoft.AspNetCore.Http.IHeaderDictionary!
Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature
Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.IsUpgradableRequest.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.UpgradeAsync() -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature
Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature.AcceptAsync(Microsoft.AspNetCore.Http.WebSocketAcceptContext! context) -> System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket!>!
Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature.IsWebSocketRequest.get -> bool
Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature
Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.Mode.get -> Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.Mode.set -> void
Microsoft.AspNetCore.Http.Features.IItemsFeature
Microsoft.AspNetCore.Http.Features.IItemsFeature.Items.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Http.Features.IItemsFeature.Items.set -> void
Microsoft.AspNetCore.Http.Features.IQueryFeature
Microsoft.AspNetCore.Http.Features.IQueryFeature.Query.get -> Microsoft.AspNetCore.Http.IQueryCollection!
Microsoft.AspNetCore.Http.Features.IQueryFeature.Query.set -> void
Microsoft.AspNetCore.Http.Features.IRequestBodyPipeFeature
Microsoft.AspNetCore.Http.Features.IRequestBodyPipeFeature.Reader.get -> System.IO.Pipelines.PipeReader!
Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature
Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature.Cookies.get -> Microsoft.AspNetCore.Http.IRequestCookieCollection!
Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature.Cookies.set -> void
Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature
Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature.Cookies.get -> Microsoft.AspNetCore.Http.IResponseCookies!
Microsoft.AspNetCore.Http.Features.IServerVariablesFeature
Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.this[string! variableName].get -> string?
Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.this[string! variableName].set -> void
Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature
Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.RequestServices.get -> System.IServiceProvider!
Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.RequestServices.set -> void
Microsoft.AspNetCore.Http.Features.ISessionFeature
Microsoft.AspNetCore.Http.Features.ISessionFeature.Session.get -> Microsoft.AspNetCore.Http.ISession!
Microsoft.AspNetCore.Http.Features.ISessionFeature.Session.set -> void
Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature
Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.ClientCertificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?
Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.ClientCertificate.set -> void
Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.GetClientCertificateAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2?>!
Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature
Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature.GetProvidedTokenBindingId() -> byte[]!
Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature.GetReferredTokenBindingId() -> byte[]!
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.CanTrack.get -> bool
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.CreateConsentCookie() -> string!
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.GrantConsent() -> void
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.HasConsent.get -> bool
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.IsConsentNeeded.get -> bool
Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.WithdrawConsent() -> void
Microsoft.AspNetCore.Http.IFormCollection
Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(string! key) -> bool
Microsoft.AspNetCore.Http.IFormCollection.Count.get -> int
Microsoft.AspNetCore.Http.IFormCollection.Files.get -> Microsoft.AspNetCore.Http.IFormFileCollection!
Microsoft.AspNetCore.Http.IFormCollection.Keys.get -> System.Collections.Generic.ICollection<string!>!
Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(string! key, out Microsoft.Extensions.Primitives.StringValues value) -> bool
Microsoft.AspNetCore.Http.IFormCollection.this[string! key].get -> Microsoft.Extensions.Primitives.StringValues
Microsoft.AspNetCore.Http.IFormFile
Microsoft.AspNetCore.Http.IFormFile.ContentDisposition.get -> string!
Microsoft.AspNetCore.Http.IFormFile.ContentType.get -> string!
Microsoft.AspNetCore.Http.IFormFile.CopyTo(System.IO.Stream! target) -> void
Microsoft.AspNetCore.Http.IFormFile.CopyToAsync(System.IO.Stream! target, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.IFormFile.FileName.get -> string!
Microsoft.AspNetCore.Http.IFormFile.Headers.get -> Microsoft.AspNetCore.Http.IHeaderDictionary!
Microsoft.AspNetCore.Http.IFormFile.Length.get -> long
Microsoft.AspNetCore.Http.IFormFile.Name.get -> string!
Microsoft.AspNetCore.Http.IFormFile.OpenReadStream() -> System.IO.Stream!
Microsoft.AspNetCore.Http.IFormFileCollection
Microsoft.AspNetCore.Http.IFormFileCollection.GetFile(string! name) -> Microsoft.AspNetCore.Http.IFormFile?
Microsoft.AspNetCore.Http.IFormFileCollection.GetFiles(string! name) -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.IFormFile!>!
Microsoft.AspNetCore.Http.IFormFileCollection.this[string! name].get -> Microsoft.AspNetCore.Http.IFormFile?
Microsoft.AspNetCore.Http.IHeaderDictionary
Microsoft.AspNetCore.Http.IHeaderDictionary.ContentLength.get -> long?
Microsoft.AspNetCore.Http.IHeaderDictionary.ContentLength.set -> void
Microsoft.AspNetCore.Http.IHeaderDictionary.this[string! key].get -> Microsoft.Extensions.Primitives.StringValues
Microsoft.AspNetCore.Http.IHeaderDictionary.this[string! key].set -> void
Microsoft.AspNetCore.Http.IQueryCollection
Microsoft.AspNetCore.Http.IQueryCollection.ContainsKey(string! key) -> bool
Microsoft.AspNetCore.Http.IQueryCollection.Count.get -> int
Microsoft.AspNetCore.Http.IQueryCollection.Keys.get -> System.Collections.Generic.ICollection<string!>!
Microsoft.AspNetCore.Http.IQueryCollection.TryGetValue(string! key, out Microsoft.Extensions.Primitives.StringValues value) -> bool
Microsoft.AspNetCore.Http.IQueryCollection.this[string! key].get -> Microsoft.Extensions.Primitives.StringValues
Microsoft.AspNetCore.Http.IRequestCookieCollection
Microsoft.AspNetCore.Http.IRequestCookieCollection.ContainsKey(string! key) -> bool
Microsoft.AspNetCore.Http.IRequestCookieCollection.Count.get -> int
Microsoft.AspNetCore.Http.IRequestCookieCollection.Keys.get -> System.Collections.Generic.ICollection<string!>!
Microsoft.AspNetCore.Http.IRequestCookieCollection.TryGetValue(string! key, out string? value) -> bool
Microsoft.AspNetCore.Http.IRequestCookieCollection.this[string! key].get -> string?
Microsoft.AspNetCore.Http.IResponseCookies
Microsoft.AspNetCore.Http.IResponseCookies.Append(string! key, string! value) -> void
Microsoft.AspNetCore.Http.IResponseCookies.Append(string! key, string! value, Microsoft.AspNetCore.Http.CookieOptions! options) -> void
Microsoft.AspNetCore.Http.IResponseCookies.Delete(string! key) -> void
Microsoft.AspNetCore.Http.IResponseCookies.Delete(string! key, Microsoft.AspNetCore.Http.CookieOptions! options) -> void
Microsoft.AspNetCore.Http.ISession
Microsoft.AspNetCore.Http.ISession.Clear() -> void
Microsoft.AspNetCore.Http.ISession.CommitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.ISession.Id.get -> string!
Microsoft.AspNetCore.Http.ISession.IsAvailable.get -> bool
Microsoft.AspNetCore.Http.ISession.Keys.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Http.ISession.LoadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Http.ISession.Remove(string! key) -> void
Microsoft.AspNetCore.Http.ISession.Set(string! key, byte[]! value) -> void
Microsoft.AspNetCore.Http.ISession.TryGetValue(string! key, out byte[]? value) -> bool
Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.SameSiteMode.Lax = 1 -> Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.SameSiteMode.None = 0 -> Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.SameSiteMode.Strict = 2 -> Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.SameSiteMode.Unspecified = -1 -> Microsoft.AspNetCore.Http.SameSiteMode
Microsoft.AspNetCore.Http.WebSocketAcceptContext
Microsoft.AspNetCore.Http.WebSocketAcceptContext.WebSocketAcceptContext() -> void
static readonly Microsoft.AspNetCore.Http.Features.FeatureReference<T>.Default -> Microsoft.AspNetCore.Http.Features.FeatureReference<T>
virtual Microsoft.AspNetCore.Http.Features.FeatureCollection.Revision.get -> int
virtual Microsoft.AspNetCore.Http.WebSocketAcceptContext.SubProtocol.get -> string?
virtual Microsoft.AspNetCore.Http.WebSocketAcceptContext.SubProtocol.set -> void
